### HclusEval ###

# The following code is a project to produce R code that
# calculates RMSSTD, RSQ, SPRSQ, and Cluster distance 
# for the evaluation of R hclust output

# Source: http://www.joecjr.com/2014/02/13/r-hcluseval/
# Post Bugs on comment section of the above page

# Authors: Joe Cauteruccio, Jessie Li, Andrew West
# Yale University: Department of Statistics

# Version: 3
# Last Updated: 4/5/21 JDRS
# Change Log: 
# 2/15/14: Added new functionality for plotting. New function option to surpress automatic plotting.
# 4/5/21: Make separate plot for CD and add ability to change how many cluster solutions are shown
# 6/16/25: Fix problem on CD plot

gen_cutmat <- function(clus_out, mdim) {
  cut_mat <- matrix(nrow = mdim, ncol = mdim)
  for (i in mdim:1){
    cut_mat[, i] <- cutree(clus_out,k=i)
  }
  return(cut_mat)
}

affected.rows <- function(object.merge){
  x <- object.merge
  list.affected.rows <- list()
  tot.cat <- nrow(x)+1
  cluster.mat <- matrix(0, nrow=nrow(x), ncol=tot.cat)
  cluster.mat[nrow(x), -x[1, ]] <- 1 
  for (i in 2:nrow(x)){
    cluster.mat[tot.cat-i, ] <- cluster.mat[tot.cat+1-i, ]
    if (sum(sign(x[i, ])) == -2) cluster.mat[tot.cat-i, -x[i, ]] <- i
    if (sum(sign(x[i, ])) == 0){
      cluster.mat[tot.cat-i, -x[i, 1]] <- x[i, 2]
      cluster.mat[tot.cat-i, cluster.mat[tot.cat-i, ] == x[i, 2]] <- i
    }
    if (sum(sign(x[i, ])) == +2){
      cluster.mat[tot.cat-i, cluster.mat[tot.cat-i, ] == x[i, 1]] <- i
      cluster.mat[tot.cat-i, cluster.mat[tot.cat-i, ] == x[i, 2]] <- i
    }
  }
  
  for (i in 1:nrow(cluster.mat)) list.affected.rows[[i]] <- which(cluster.mat[i, ] == (tot.cat-i))
  return(list(cluster.mat, list.affected.rows))
}

RMSSTD_FUNC <- function(mod_dat, row_v, dim_obs){
  RMSSTD_vec <- rep(NA, dim_obs)
  RMSSTD_vec[dim_obs] <- 0
  
  for (i in (dim_obs - 1):1) { 
    x_bar_k <- apply(mod_dat[row_v[[i]], ], 2, mean)
    w_k <- sum(apply(mod_dat[row_v[[i]], ], 1, function(x) (dist(rbind(x, x_bar_k))^2))) 
    RMSSTD_vec[i] <- sqrt(w_k/(dim(mod_dat)[2]*(length(row_v[[i]]) - 1)))
  }
  
  return(RMSSTD_vec)
  
}

RSQ_FUNC <- function(mod_dat, cut_mat, dim_obs) {
  
  # SS at levels
  SS_vect <- rep(NA, dim_obs)
  x_bar_all <- apply(mod_dat, 2, mean)
  tot_ss <- sum(apply(mod_dat, 1, function(x) (dist(rbind(x, x_bar_all))^2)))

  for (i in (dim_obs:1)) {
    # Get Clusters in H 
    
    clus_g <- unique(cut_mat[, i])
    level_PG <- 0
    
    for (k in clus_g) {
      need_rows <- which(cut_mat[, i] %in% k)
      
      if (length(need_rows) > 1) {
        x_bar_k <- apply(mod_dat[need_rows, ], 2, mean)
        w_k <- sum(apply(mod_dat[need_rows, ], 1, function(x) (dist(rbind(x, x_bar_k))^2)))
      }
      
      if (length(need_rows) == 1) {
        x_bar_k <- mod_dat[need_rows, ]
        w_k <- dist(rbind(mod_dat[need_rows, ], x_bar_k))^2
      }
      
      level_PG <- level_PG + w_k
      
    }
    
    SS_vect[i] <- 1 - (level_PG/tot_ss)
  }
    
  return(SS_vect)
  
}


SPRS_FUNC <- function(data_m, rows, dim_m, cut_mat) {
  SPRS_vect <- rep(NA, dim_m)
  SPRS_vect[dim_m] <- 0
  
  x_bar_all <- apply(data_m, 2, mean)
  tot_ss <- sum(apply(data_m, 1, function(x) (dist(rbind(x, x_bar_all))^2)))
  
  
  for (i in (dim_m - 1):1) {
    
    need_rows <- rows[[i]]
    
    if (length(need_rows) > 1) {
      x_bar_m <- apply(data_m[need_rows, ], 2, mean)
      w_m <- sum(apply(data_m[need_rows, ], 1, 
        function(x) (dist(rbind(x, x_bar_m))^2)))
    }
    
    if (length(need_rows) == 1) {
      x_bar_m <- data_m[need_rows, ]
      w_m <- dist(rbind(data_m[need_rows, ], x_bar_m))^2
    }
    
    # Get clusters of these rows from the previous step
    need_clus_prev <- unique(cut_mat[need_rows, i + 1])
    
    # Get Rows of cluster K
    need_rows_k <- which(cut_mat[, i + 1] %in% need_clus_prev[1])
    
    if (length(need_rows_k) > 1) {
      x_bar_k <- apply(data_m[need_rows_k, ], 2, mean)
      w_k <- sum(apply(data_m[need_rows_k, ], 1, 
        function(x) (dist(rbind(x, x_bar_k))^2)))
    }
    
    if (length(need_rows_k) == 1) {
      x_bar_k <- data_m[need_rows_k, ]
      w_k <- dist(rbind(data_m[need_rows_k, ], x_bar_k))^2
    }
    
    # Get Rows of cluster L
    need_rows_l <- which(cut_mat[, i + 1] %in% need_clus_prev[2])
    
    if (length(need_rows_l) > 1) {
      x_bar_l <- apply(data_m[need_rows_l, ], 2, mean)
      w_l <- sum(apply(data_m[need_rows_l, ], 1, 
        function(x) (dist(rbind(x, x_bar_l))^2)))
    }
    
    if (length(need_rows_l) == 1) {
      x_bar_l <- data_m[need_rows_l, ]
      w_l <- dist(rbind(data_m[need_rows_l, ], x_bar_l))^2
    }
    
    SPRS_vect[i] <- (w_m - w_k - w_l)/ tot_ss
  }
  
  return(SPRS_vect)
}

## Find the cluster distance ##
cluster.dis <- function(data, hclust.obj, SPRS_V){
  meth <- hclust.obj$method
  cd_vec <- rep(0, nrow(data)-1)
  cluster.mat <- affected.rows(hclust.obj$merge)[[1]]
  affected.rows <- affected.rows(hclust.obj$merge)[[2]]
  
  if (meth == "ward.D") cd_vec <- SPRS_V
  
  if (meth == "average"){
    for (i in 1:length(cd_vec)){
      merged.set <- hclust.obj$merge[nrow(data)-i, ]
      if (sum(sign(merged.set)) == -2){
        temp.1 <- -merged.set[1]
        temp.2 <- -merged.set[2]
      }
      
      if (sum(sign(merged.set)) == 0){
        temp.1 <- -merged.set[sign(merged.set) == -1]
        temp.2 <- which(cluster.mat[nrow(data)-merged.set[sign(merged.set) == 1], ] == merged.set[sign(merged.set) == 1])
      }
      
      if (sum(sign(merged.set)) == 2){
        temp.1 <- which(cluster.mat[nrow(data)-merged.set[1], ] == merged.set[1])
        temp.2 <- which(cluster.mat[nrow(data)-merged.set[2], ] == merged.set[2])
      }
      
      each.dis <- rep(0, length(temp.1)*length(temp.2))
      temp.sum <- 0
      for (j in 1:length(temp.1)){
        for (k in 1:length(temp.2)){
          temp.sum <- temp.sum+dist(rbind(data[temp.1[j], ], data[temp.2[k], ]))
        }
      }
      cd_vec[i] <- temp.sum/(length(temp.1)*length(temp.2))
    }
  }
  
  if (meth == "single"){
    for (i in 1:length(cd_vec)){
      merged.set <- hclust.obj$merge[nrow(data)-i, ]
      if (sum(sign(merged.set)) == -2){
        temp.1 <- -merged.set[1]
        temp.2 <- -merged.set[2]
      }
      
      if (sum(sign(merged.set)) == 0){
        temp.1 <- -merged.set[sign(merged.set) == -1]
        temp.2 <- which(cluster.mat[nrow(data)-merged.set[sign(merged.set) == 1], ] == merged.set[sign(merged.set) == 1])
      }
      
      if (sum(sign(merged.set)) == 2){
        temp.1 <- which(cluster.mat[nrow(data)-merged.set[1], ] == merged.set[1])
        temp.2 <- which(cluster.mat[nrow(data)-merged.set[2], ] == merged.set[2])
      }
      
      each.dis <- matrix(0, nrow=length(temp.1), ncol=length(temp.2))
      for (j in 1:length(temp.1)){
        for (k in 1:length(temp.2)){
          each.dis[j, k] <- dist(rbind(data[temp.1[j], ], data[temp.2[k], ]))
        }
      }
      cd_vec[i] <- min(each.dis)
    }
  }
  
  if (meth == "complete"){
    for (i in 1:length(cd_vec)){
      merged.set <- hclust.obj$merge[nrow(data)-i, ]
      if (sum(sign(merged.set)) == -2){
        temp.1 <- -merged.set[1]
        temp.2 <- -merged.set[2]
      }
      
      if (sum(sign(merged.set)) == 0){
        temp.1 <- -merged.set[sign(merged.set) == -1]
        temp.2 <- which(cluster.mat[nrow(data)-merged.set[sign(merged.set) == 1], ] == merged.set[sign(merged.set) == 1])
      }
      
      if (sum(sign(merged.set)) == 2){
        temp.1 <- which(cluster.mat[nrow(data)-merged.set[1], ] == merged.set[1])
        temp.2 <- which(cluster.mat[nrow(data)-merged.set[2], ] == merged.set[2])
      }
      
      each.dis <- matrix(0, nrow=length(temp.1), ncol=length(temp.2))
      for (j in 1:length(temp.1)){
        for (k in 1:length(temp.2)){
          each.dis[j, k] <- dist(rbind(data[temp.1[j], ], data[temp.2[k], ]))
        }
      }
      cd_vec[i] <- max(each.dis)
    }
  }
  
  if (meth == "mcquitty"){
    print("Mcquitty agglomeration for cluster distance metric not currently supported")
  }
  
  if (meth == "median"){
    print("Median agglomeration for cluster distance metric not currently supported")
  }
  
  if (meth == "centroid"){
    print("Centroid agglomeration for cluster distance metric not currently supported")
  } 
  
  return(cd_vec) 
}


####
hclus_eval <- function(data_m, dist_m = 'euclidean', clus_m = 'ward', plot_op = T, dist_cust = NA, print_num = NA){
  
  output_list <- list()
  
  ## Some Initial Calculations
  
 ### END INITIAL CALCULATIONS
  
  ### Create Distance matrix and Clustering ###
  Info <- paste('Creating Distance Matrix using', dist_m)
  print(Info)
  
    if (dist_m == 'custom' & !is.na(dist_cust)) {dist1 <- dist_cust} 
    else dist1 <- dist(data_m, method= dist_m)

  
  Info <- paste('Clustering using', clus_m)
  print(Info)
  
  clust1 <- hclust(dist1, method = clus_m)
 
  print('Clustering Complete. Access the Cluster object in first element of output')
  
  output_list[[1]] <- clust1
  
  
  rs_out <- affected.rows(clust1$merge)
  
  me <- gen_cutmat(clust1, dim(data_m)[1])
  rs <- rs_out[[2]]

  # Calculate Metrics #
  
  print('Calculating RMSSTD')
  output_list[[2]] <- RMSSTD_FUNC(data_m, rs, dim(data_m)[1])
  print('RMSSTD Done. Access in Element 2')
  
  print('Calculating RSQ')
  output_list[[3]] <- RSQ_FUNC(data_m, me, dim(data_m)[1])
  print('RSQ Done. Access in Element 3')
  
  print('Calculating SPRSQ')
  output_list[[4]] <- SPRS_FUNC(data_m, rs, dim(data_m)[1], me)
  print('SPRSQ Done. Access in Element 4')
  
  print('Calculating Cluster Dist. ')
  output_list[[5]] <- cluster.dis(data_m, clust1, output_list[[4]])
  print('CD Done. Access in Element 5')

  #ylim_n <- max(output_list[[2]], output_list[[3]], output_list[[4]], output_list[[5]])
  ylim_n <- max(output_list[[2]], output_list[[3]], output_list[[4]])

  if (plot_op == T){
    print_len <- rep(print_num, 5)
    if (is.na(print_num)) {
       for (i in 1:5) {print_len[i] <- length(output_list[[i]])}
    }
    plot(output_list[[3]][1:print_len[3]], type = 'l', col = 'red', ylim = c(0, ylim_n), lwd=3)
    lines(output_list[[2]][1:print_len[2]], col = 'blue', lwd=3)
    lines(output_list[[4]][1:print_len[4]], col = 'green', lwd=3)
    #lines(output_list[[5]][1:print_len[5]], col = 'black', lwd=3)
    legend('topright', c('RSQ', 'RMSSTD', 'SPRSQ'), lty = c(1 ,1,1),
      col = c('red', 'blue', 'green'))
    #Plot CD
   
    plot(output_list[[5]][1:print_len[5]], type = 'l', col = 'black', lwd=3)
    legend('topright', c('CD'), lty = c(1), col = c('black'))
  
  }


  return(output_list)  

}